version: 2.1
orbs:
  aws-cli: circleci/aws-cli@2.0.3

commands:
  destroy_environment:
    steps:
      - run: 
          name: Destroy environment
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7}
            when: on_fail
jobs:
  create_infrastructure: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} \
              --region us-east-1
  
  # Config and Deployment
  configure_infrastructure: 
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
              fingerprints: f1:9f:0c:e4:ca:47:4b:7a:73:15:d5:18:d0:d2:09:57 
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - run:
          name: Run Playbook and Configure server
          command: |
            ansible-playbook -i inventory.txt main-remote.yml

  # smoke_tests:
  #   docker: 
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - run: apk add --update curl
  #     - run:
  #           command: |
  #             URL="https://blog.udacity.com/"
  #             # Test if website exists
  #             if curl -s --head ${URL} 
  #             then
  #               return 0
  #             else
  #               return 1
  #             fi

  smoke_test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - run: return 1
      - destroy_environment

  create_and_deploy_front_end:
  docker:
    - image: amazon/aws-cli
  steps:
    - checkout
    - run:
        name: Execute bucket.yml - Create Cloudformation Stack
        command: |
          aws cloudformation deploy \
          --template-file bucket.yml \
          --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
          --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
    # Uncommented step to upload all contents of the current directory to the S3 bucket
    # - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete

  get_last_deployment_id:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run: yum install -y tar gzip
        - run:
            name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
            command: |
              aws cloudformation \
              list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
              --no-paginate --output text > ~/textfile.txt
        - persist_to_workspace:
            root: ~/
            paths: 
              - textfile.txt 

  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}" 

  clean_up_old_front_end:
  # Destroy the previous production version's S3 bucket and CloudFormation stack. 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous S3 bucket and CloudFormation stack. 
          # Use $OldBucketID environment variable 
          # Similarly, you can create and use $OldStackID environment variable in place of production-distro 
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive
          #  aws cloudformation delete-stack --stack-name production-distro 
          #  aws cloudformation delete-stack --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7}
          #  aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}

workflows:
  myWorkflow:
    jobs:
      - create_and_deploy_front_end
      - promote_to_production:
          requires: 
            - create_and_deploy_front_end
      - get_last_deployment_id
      - clean_up_old_front_end:
          requires:
            - get_last_deployment_id
            - promote_to_production
      